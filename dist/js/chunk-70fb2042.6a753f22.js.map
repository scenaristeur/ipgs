{"version":3,"sources":["webpack:///./node_modules/n3/src/N3Util.js","webpack:///./node_modules/n3/src/N3DataFactory.js","webpack:///./node_modules/n3/src/N3Parser.js","webpack:///./node_modules/n3/src/N3Writer.js","webpack:///./node_modules/n3/src/N3Store.js","webpack:///./node_modules/n3/src/N3StreamParser.js","webpack:///./node_modules/n3/src/N3StreamWriter.js","webpack:///./node_modules/n3/src/N3Lexer.js","webpack:///./node_modules/n3/src/IRIs.js"],"names":["isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","prefix","iri","factory","defaultPrefixes","prefixes","Object","create","processPrefix","cache","local","namedNode","Error","N3DataFactory","rdf","xsd","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","this","other","value","NamedNode","Literal","substring","lastIndexOf","atPos","length","substr","toLowerCase","datatypeString","dtPos","char","string","langString","datatype","language","BlankNode","name","super","Variable","DefaultGraph","termFromId","endPos","components","exec","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","toJSON","equals","replace","_","quoted","languageOrDataType","boolean","Number","isFinite","isInteger","integer","double","isNaN","blankNodePrefix","options","_contextStack","_graph","_setBase","baseIRI","initDataFactory","format","match","isTurtle","test","isTriG","isNTriples","isNQuads","isN3","_n3Mode","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","N3Lexer","lineMode","n3","_explicitQuantifiers","explicitQuantifiers","fragmentPos","indexOf","_base","_basePath","_baseRoot","_baseScheme","type","n3Mode","push","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","context","pop","_subject","_predicate","_object","token","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","quantifier","_resolveIRI","_namedNode","undefined","_blankNode","_variable","_saveContext","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_readEntity","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_restoreContext","_readPredicateAfterBlank","item","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","inversePredicate","_readFormulaTail","_readInTopContext","_readQuadPunctuation","_prefix","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTail","_quad","contextStack","_readRDFStarTailOrGraph","message","err","line","previousToken","noop","_removeDotSegments","result","i","pathStart","segmentStart","input","quadCallback","prefixCallback","quads","error","e","t","tokenize","every","parser","first","rest","nil","r","forAll","forSome","owl","sameAs","log","implies","prototype","escapeAll","escapedCharacters","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","end","output","chunk","encoding","done","_lineMode","_writeQuad","_writeQuadLine","_baseIRI","_prefixIRIs","addPrefixes","callback","_write","_inDefaultGraph","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","decimal","_encodeLiteral","addQuad","hasPrefixes","IRIlist","prefixList","prefixIRI","RegExp","child","children","contents","elements","Array","_blockedWrite","singleDone","character","charCodeAt","toString","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","addQuads","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","index0","key0","key1","key2","index1","index2","existed","key","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","l","parts","count","isString","uniqueIds","graphItem","predicates","objects","freeze","ids","entities","changed","_addToIndex","stream","on","_removeFromIndex","removeQuad","remove","removeMatches","_getGraphs","content","subjectId","predicateId","objectId","graphId","_findInIndex","objectMode","_read","getQuads","_countInIndex","some","results","forSubjects","s","_uniqueEntities","_loopBy2Keys","_loopByKey1","_loopByKey0","_loop","forPredicates","p","forObjects","o","forGraphs","g","suggestedName","index","ignoreErrors","onError","node","tails","toRemove","forEach","tailQuad","items","head","headPos","malformed","current","objectQuads","subjectQuads","unshift","removeQuads","String","decodeStrings","_readableState","onData","onEnd","parse","event","emit","uri","_transform","_flush","writableObjectMode","writer","_writer","addPrefix","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","_simpleApostropheString","_prefixed","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_comments","comments","_literalClosingPos","inputFinished","_input","outputComments","whiteSpaceMatch","comment","_line","firstChar","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","self","_syntaxError","invalid","replaced","sequence","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","opening","openingLength","closingPos","Math","max","backslashCount","raw","lines","split","issue","tokens","_tokenizeToEnd","_pendingBuffer","setEncoding","data","Buffer","concat","RDF","XSD","SWAP"],"mappings":"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","file":"js/chunk-70fb2042.6a753f22.js","sourcesContent":["// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this.subject   = subject;\n    this.predicate = predicate;\n    this.object    = object;\n    this.graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this.subject.toJSON(),\n      predicate: this.predicate.toJSON(),\n      object:    this.object.toJSON(),\n      graph:     this.graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this.subject.equals(other.subject)     &&\n                      this.predicate.equals(other.predicate) &&\n                      this.object.equals(other.object)       &&\n                      this.graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    return this.remove(this.match(subject, predicate, object, graph));\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a stream of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  match(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    // Initialize stream once it is being read\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return stream;\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (this._input !== null)\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n"],"sourceRoot":""}