{"version":3,"sources":["webpack:///./src/components/network/NetworkVis.vue?8c7b","webpack:///./src/components/network/NetworkVis.vue?42ff","webpack:///./src/mixins/NetMixin.js","webpack:///./src/mixins/NetworkEventMixin.js","webpack:///src/components/network/NetworkVis.vue","webpack:///./src/components/network/NetworkVis.vue?49f9","webpack:///./src/components/network/NetworkVis.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","ref","attrs","network","nodes","edges","options","on","selectNodeEvent","addNodeEvent","staticRenderFns","fc","FC","auth","mixins","networkUtilMixin","data","created","app","manipulation","initiallyActive","addNode","node","callback","label","editNode","addEdge","edge","editEdge","editWithoutDrag","methods","onRemoveNodes","e","filter","x","properties","items","includes","id","sendUpdate","onRemoveEdges","p","console","log","url","json","undefined","identiques","arraysEqual","modified","Date","createFile","JSON","stringify","then","f","color","background","border","shape","$store","commit","action","from","to","r","confirm","bugEdge","downloadCanvas","srcCanvas","document","getElementById","childNodes","canvas","destinationCanvas","createElement","width","height","destCtx","getContext","fillStyle","fillRect","drawImage","image","toDataURL","tmpLink","download","href","body","appendChild","click","removeChild","onInputObjectChange","nodeSubject","nodeObject","type","nodeFromLabel","value","subject","saveNode","object","edgeFromLabel","predicate","saveEdge","n","index","findIndex","push","Object","assign","computed","get","state","ipgs","set","inputObject","newGraph","watch","omitted","ev","forEach","built","buildEdges","entries","k","v","parse","trim","edgeLength","length","indexO","ob","substring","title","startsWith","lab","endsWith","slice","substr","lastIndexOf","mass","o","find","Array","isArray","_v","indexOBJ","nodeId","$route","query","$router","path","alert","networkClickEvent","networkEvent","graphsChanged","graphs","info","name","components","defNodes","defEdges","scaling","min","max","font","size","face","arrows","smooth","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","interaction","navigationButtons","tooltipDelay","hideEdgesOnDrag","options1","component"],"mappings":"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","file":"js/chunk-557f8816.33f50e6e.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkVis.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrapper\"},[_c('network',{ref:\"network\",staticClass:\"network\",attrs:{\"id\":\"network\",\"nodes\":_vm.network.nodes,\"edges\":_vm.network.edges,\"options\":_vm.network.options},on:{\"select-node\":_vm.selectNodeEvent,\"nodes-add\":_vm.addNodeEvent}}),_c('NetworkPopups',{attrs:{\"network\":_vm.network}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import networkUtilMixin from '@/mixins/networkUtilMixin'\r\n//import Network from '@/models/Network.js'\r\n//import Loader from '@/util/Loader.js'\r\n\r\nimport auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\n\r\nexport default {\r\n  mixins: [networkUtilMixin],\r\n  data() {\r\n    return {\r\n\r\n\r\n\r\n      // A VIRER\r\n    //  loader: new Loader(),\r\n    }\r\n  },\r\n  async created(){\r\n    let app = this\r\n    this.network.options.manipulation = {\r\n      initiallyActive: true,\r\n      addNode: async (node, callback) => { node.label = \"\" ; app.editNode(node, callback) },\r\n      editNode: async (node, callback) => { app.editNode(node, callback) },\r\n      addEdge: async (edge, callback) => { app.addEdge(edge, callback) },\r\n      editEdge: { editWithoutDrag: async (edge, callback) => {app.editWithoutDrag(edge, callback)} }\r\n\r\n      //  editEdge: async (edge, callback) => { app.editWithoutDrag(edge, callback) },\r\n      //  editEdge: {}\r\n    }\r\n\r\n    //  this.network.options.manipulation.editEdge.editWithoutDrag = async (edge, callback) => {app.editWithoutDrag(edge, callback)}\r\n\r\n\r\n\r\n    // if (this.$route.query.url != undefined ){\r\n    //   this.url = this.$route.query.url\r\n    //   console.log('url',this.url)\r\n    //\r\n    // }\r\n    // this.storage = this.$store.state.solid.storage\r\n    //\r\n    // if(this.storage != null){\r\n    //   console.log(\"storage\",this.storage)\r\n    // }\r\n\r\n    // if (this.$route.query.url != undefined ){\r\n    //   this.url = this.$route.query.url\r\n    //   console.log(\"OLD LOAD load url\",this.url)\r\n    // //  await this.load(this.url)\r\n    // }else{\r\n    //   this.storage = this.$store.state.solid.storage\r\n    //   //console.log(this.storage)\r\n    //   if (this.storage != null){\r\n    //     console.log(\"load storage\",this.storage)\r\n    //     await this.load(this.storage)\r\n    //   }\r\n    // }\r\n\r\n\r\n\r\n\r\n  },\r\n  methods: {\r\n    /**\r\n    * Catch @nodes-remove event of vue-vis-network and update network.nodes\r\n    * @param {object} e - parameters of the nodes-remove event.\r\n    */\r\n    onRemoveNodes(e){\r\n      this.network.nodes = this.network.nodes.filter(x => !e.properties.items.includes(x.id))\r\n      this.sendUpdate(e)\r\n    },\r\n    /**\r\n    * Catch @edges-remove event of vue-vis-network and update network.edges\r\n    * @param {object} e - parameters of the edges-remove event.\r\n    */\r\n    onRemoveEdges(p){\r\n      this.network.edges = this.network.edges.filter(x => !p.properties.items.includes(x.id))\r\n      this.sendUpdate(p)\r\n    },\r\n    async sendUpdate(p){\r\n      console.log(p)\r\n      console.log(this.url)\r\n      console.log(this.network)\r\n      console.log(\"le json\", this.json)\r\n\r\n\r\n      if(this.json != undefined && this.json[\"@context\"] != \"https://data.virtual-assembly.org/context.json\"){\r\n        console.log(\"TODO must send only if different \")\r\n        let identiques = this.arraysEqual(this.json.nodes, this.network.nodes) && this.arraysEqual(this.json.edges, this.network.edges)\r\n        console.log(\"identiques\",identiques)\r\n        if (identiques == false && this.url != undefined){\r\n          this.json.nodes = this.network.nodes\r\n          this.json.edges = this.network.edges\r\n          this.json.modified = new Date()\r\n          console.log(this.json)\r\n\r\n          await fc.createFile( this.json.url, JSON.stringify(this.json), \"application/ld+json\" ).then(\r\n            f => {\r\n              console.log(f)\r\n            });\r\n          }\r\n        }\r\n\r\n      },\r\n\r\n      // async load1(url){\r\n      //   console.log(\"load\",url)\r\n      //   let d = new Date()\r\n      //   this.net = new Network()\r\n      //   let dat = await this.loader.load(url)\r\n      //   //  console.log(\"DAT\",dat)\r\n      //   await this.net.hydrate(dat)\r\n      //   this.network.nodes = this.net.visRepresentation.nodes\r\n      //   this.network.edges = this.net.visRepresentation.edges\r\n      //   console.warn(d, this.network)\r\n      //\r\n      //   //console.warn(this.network)\r\n      // },\r\n      // onSelectNode(p){\r\n      //   console.log(p)\r\n      //   console.log(p.nodes[0])\r\n      //   //console.log(this.nodes)\r\n      //   let node = this.network.nodes.find(x => x.id==p.nodes[0]);\r\n      //   console.log(node)\r\n      //   this.$store.commit('ipgs/addToHistory', node)\r\n      //   //  if(node.type == 'folder' || node.type == 'file'){\r\n      //   try{\r\n      //     if(node.id.startsWith('http')){\r\n      //       this.load(node.id)\r\n      //     }else{\r\n      //       this.$store.commit('ipgs/setCommandInput', node.label+' ')\r\n      //     }\r\n      //   }catch(e){\r\n      //     alert(e)\r\n      //   }\r\n      //   // console.log(this.nodeData)\r\n      //   //\r\n      //   // this.$bvModal.show(\"node-menu\")\r\n      //\r\n      //   //}\r\n      //\r\n      // },\r\n      editNode(node, callback){\r\n        //    this.node = node\r\n        node.color == undefined ? node.color =  {  background: '#D2E5FF', border: '#2B7CE9'} : \"\"\r\n        node.shape == undefined ? node.shape = 'ellipse': \"\"\r\n        //  this.$bvModal.show(\"node-popup\")\r\n        this.$store.commit('ipgs/setAction', {action: 'editNode', node: node})\r\n        callback()\r\n      },\r\n      addEdge(edge, callback){\r\n        //  this.edge = edge\r\n        if (edge.from == edge.to) {\r\n          var r = confirm(\"Do you want to connect the node to itself?\");\r\n          if (r != true) { callback(null); return; }\r\n        }\r\n        this.editWithoutDrag(edge, callback);\r\n      },\r\n      //  editEdge(edge, callback){ this.editWithoutDrag(edge, callback); },\r\n      editWithoutDrag(edge, callback){\r\n        //  this.edge = edge\r\n        console.log(edge)\r\n        let bugEdge = edge\r\n        bugEdge.from = edge.from.id != undefined ? edge.from.id : edge.from\r\n        bugEdge.to  = edge.to.id != undefined ? edge.to.id : edge.to\r\n        this.$store.commit('ipgs/setAction', {action: 'editEdge', edge: bugEdge})\r\n        //  this.$bvModal.show(\"edge-popup\")\r\n        callback()\r\n      },\r\n      downloadCanvas(){\r\n        // get canvas data\r\n        var srcCanvas = document.getElementById( 'network' ).childNodes[0].canvas;\r\n        console.log(srcCanvas)\r\n        let destinationCanvas = document.createElement(\"canvas\");\r\n        destinationCanvas.width = srcCanvas.width;\r\n        destinationCanvas.height = srcCanvas.height;\r\n\r\n        let destCtx = destinationCanvas.getContext('2d');\r\n\r\n        //create a rectangle with the desired color\r\n        destCtx.fillStyle = \"#FFFFFF\";\r\n        destCtx.fillRect(0,0,srcCanvas.width,srcCanvas.height);\r\n\r\n        //draw the original canvas onto the destination canvas\r\n        destCtx.drawImage(srcCanvas, 0, 0);\r\n\r\n        //finally use the destinationCanvas.toDataURL() method to get the desired output;\r\n\r\n        var image =   destinationCanvas.toDataURL(); //canvas.toDataURL(\"image/png\");\r\n\r\n        // create temporary link\r\n        var tmpLink = document.createElement( 'a' );\r\n        tmpLink.download = 'image.png'; // set the name of the download file\r\n        tmpLink.href = image;\r\n\r\n        // temporarily add link to body and initiate the download\r\n        document.body.appendChild( tmpLink );\r\n        tmpLink.click();\r\n        document.body.removeChild( tmpLink );\r\n      },\r\n      onInputObjectChange(data){\r\n        console.log(\"onCommand\",data)\r\n        let nodeSubject, nodeObject, edge\r\n        switch (data.type) {\r\n          case 'triplet':\r\n          nodeSubject = this.nodeFromLabel(data.value.subject)\r\n          this.saveNode(nodeSubject)\r\n          nodeObject = this.nodeFromLabel(data.value.object)\r\n          this.saveNode(nodeObject)\r\n          console.log(nodeSubject.id, nodeObject.id)\r\n          edge = this.edgeFromLabel({from: nodeSubject.id, to: nodeObject.id, label: data.value.predicate})\r\n          console.log(edge)\r\n          this.saveEdge(edge)\r\n          break;\r\n          case 'url':\r\n          console.log(data)\r\n          break;\r\n          default:\r\n          console.log(\"TODO\",data)\r\n        }\r\n      },\r\n      saveNode(n){\r\n        var index = this.network.nodes.findIndex(x => x.id==n.id);\r\n        index === -1 ? this.network.nodes.push(n) : Object.assign(this.network.nodes[index], n)\r\n        this.sendUpdate(n)\r\n      },\r\n      saveEdge(e){\r\n        console.log(e)\r\n        var index = this.network.edges.findIndex(x => x.id==e.id);\r\n        index === -1 ? this.network.edges.push(e) : Object.assign(this.network.edges[index], e)\r\n        console.log(this.network)\r\n        this.sendUpdate(e)\r\n      },\r\n    },\r\n    computed: {\r\n      action: {\r\n        get () { return this.$store.state.ipgs.action},\r\n        set (/*value*/) { /*this.updateTodo(value)*/ }\r\n      },\r\n      inputObject: {\r\n        get () { return this.$store.state.ipgs.inputObject},\r\n        set (/*value*/) { /*this.updateTodo(value)*/ }\r\n      },\r\n      newGraph: {\r\n        get () { return this.$store.state.ipgs.newGraph},\r\n        set (/*value*/) { /*this.updateTodo(value)*/ }\r\n      }\r\n      // socketMessageUrl: {\r\n      //   get () { return this.$store.state.ipgs.socketMessageUrl},\r\n      //   set (/*value*/) { /*this.updateTodo(value)*/ }\r\n      // }\r\n    },\r\n    watch:{\r\n      newGraph(){\r\n        console.log('New Graph',this.newGraph)\r\n\r\n        this.network.nodes = []\r\n        this.network.edges = []\r\n        let n = this.newGraph.node\r\n        n.id = this.newGraph.url\r\n        this.network.nodes.push (n)\r\n      //  alert (\"todo: you must create a new file\")\r\n        let inputObject = {}\r\n        inputObject.type = \"commande\";\r\n        inputObject.value = '/e';\r\n        inputObject.inputNew = \"\";\r\n        this.$store.commit('ipgs/setInputObject', inputObject)\r\n\r\n      },\r\n      // socketMessageUrl(){\r\n      //   this.load(this.socketMessageUrl)\r\n      // //  console.log(\"MUST UPDATEEEEEEEEEEEEEEEEEEEEEEE\",this.socketMessageUrl)\r\n      // //  this.$store.commit('ipgs/setWebsocketMesssage', \"\")\r\n      // },\r\n      action(){\r\n        console.log(this.action)\r\n        switch (this.action.action) {\r\n          case 'newGraph':\r\n          this.network.nodes = []\r\n          this.network.edges = []\r\n          break;\r\n          case 'capture':\r\n          this.downloadCanvas()\r\n          break;\r\n\r\n          default:\r\n\r\n        }\r\n\r\n      },\r\n      inputObject(){\r\n        this.onInputObjectChange(this.inputObject)\r\n      },\r\n    }\r\n\r\n  }\r\n","//import { v4 as uuidv4 } from 'uuid';\r\nlet omitted = [ \"@context\", \"id\", \"label\", \"pair:label\", \"name\",  \"inbox\", \"outbox\", \"followers\", \"following\", \"publicKey\", \"shape\", /*\"type\",*/ \"title\", \"color\", \"image\"]\r\n\r\nexport default {\r\n\r\n  methods: {\r\n    addNodeEvent(ev){\r\n      // console.log(ev)\r\n      const app = this\r\n      let nodes = this.network.nodes.filter(n => ev.properties.items.includes(n.id))\r\n      console.log(nodes)\r\n\r\n      nodes.forEach( function (n) {\r\n        if(n.built == undefined){\r\n          app.buildEdges(n)\r\n        }\r\n      });\r\n    },\r\n    buildEdges(n){\r\n      for (const [k, v] of Object.entries(n)) {\r\n        this.parse(n,k,v)\r\n      }\r\n      n.built = true\r\n    },\r\n\r\n    parse(n, k, v){\r\n      let network = this.network\r\n      if (typeof v == \"string\"){\r\n        v = v.trim()\r\n        let edgeLength = undefined\r\n        if(!omitted.includes(k) && v.length > 0){\r\n          var indexO = network.nodes.findIndex(x => x.id==v);\r\n          if(indexO === -1){\r\n            let ob =   {id: v, shape: \"box\"}\r\n            if (v.length > 20 ){\r\n              ob.label = v.substring(0,20)+\"..\"\r\n              ob.title = v\r\n            }\r\n            else{\r\n              ob.label = v\r\n            }\r\n\r\n            if (v.startsWith('http')){\r\n              ob.color = \"#7FD1B9\"\r\n              if (v.length > 50 ){\r\n                let lab = v.endsWith('/') ? v.slice(0, -1) : v\r\n                ob.label = lab.substr(lab.lastIndexOf('/') + 1);\r\n                ob.label = ob.label.length > 20 ? ob.label.substring(0,20)+\"..\" : ob.label\r\n                ob.label = \"->\"+ob.label\r\n                ob.title = v\r\n              }else{\r\n                ob.label = v\r\n              }\r\n            }else{\r\n              ob.color = \"#ECC046\"\r\n              edgeLength = 10\r\n            }\r\n            if( k == \"type\"){\r\n              ob.shape = \"star\"\r\n              ob.color= \"#DE6E4B\"\r\n            }\r\n\r\n\r\n            ob.built = true\r\n            network.nodes.push(ob)\r\n          }else{\r\n            console.log(network.nodes[indexO].mass)\r\n            network.nodes[indexO].mass == undefined ? 1 : network.nodes[indexO].mass++\r\n          }\r\n          let o = network.nodes.find(n => n.id == v)\r\n\r\n          if( k == \"type\"){\r\n            // must do this test a second time after the node has been added to get network.nodes.length ????\r\n            edgeLength = 1000\r\n          }\r\n          let edge = {from: n.id, to: o.id, label: k }\r\n          if (edgeLength != undefined){\r\n            edge.length = edgeLength\r\n            //edge.strength = 300\r\n          }\r\n          network.edges.push(edge)\r\n\r\n        }else{\r\n          k == \"pair:label\" ? n.label = v : \"\"\r\n          k == \"label\" ? n.label = v : \"\"\r\n          k == \"name\" ? n.label = v : \"\"\r\n          if(k ==  \"image\"){\r\n            n.shape = \"circularImage\"\r\n            n.image = v\r\n          }\r\n\r\n        }\r\n      }else if (Array.isArray(v)){\r\n        //console.log(v)\r\n        v.forEach((_v) => {\r\n          this.parse(n,k,_v)\r\n        });\r\n\r\n\r\n      } else{\r\n        if(!omitted.includes(k) && typeof v == \"object\"){\r\n\r\n          var indexOBJ = network.nodes.findIndex(x => x.id==v.id);\r\n          if(indexOBJ === -1){\r\n            console.log(\"ADDING\",n.id, typeof v,k, v)\r\n            network.nodes.push(v)\r\n\r\n\r\n          }\r\n          network.edges.push({from: n.id, to: v.id, label: k})\r\n          console.log(\"ADDING edge\",n.id, k, v.id)\r\n        }\r\n        else  if(!omitted.includes(k) && typeof v == \"number\"){\r\n          console.log(\"TODO\",n.id, typeof v,k, v)\r\n          //  this.parse(n, k, v)\r\n        }\r\n        else\r\n        {\r\n          console.log(\"TODO\",n.id, typeof v,k, v)\r\n        }\r\n\r\n      }\r\n    },\r\n    // updateNodeEvent(ev){\r\n    //   //console.log(ev)\r\n    //   const app = this\r\n    //   let nodes = this.network.nodes.filter(n => ev.properties.items.includes(n.id))\r\n    //   console.log(nodes)\r\n    //\r\n    //   nodes.forEach(async function (n) {\r\n    //     if(n.built == undefined){\r\n    //       await app.buildEdges(n)\r\n    //     }\r\n    //   });\r\n    // },\r\n    selectNodeEvent(ev){\r\n      let nodeId = ev.nodes[0]\r\n      console.log(nodeId)\r\n      if (nodeId.startsWith('http')){\r\n        if (this.$route.query.url != nodeId){\r\n          this.$router.push({ path: '/', query: { url: nodeId } })\r\n        }else{\r\n          alert (\"you are already watching this resource !\")\r\n        }\r\n      }else{\r\n        let node = this.network.nodes.find(x => x.id==nodeId);\r\n        this.$store.commit('ipgs/setCommandInput', node.label+' ')\r\n      }\r\n    },\r\n    networkClickEvent(ev){\r\n      console.log(ev)\r\n    },\r\n    networkEvent(ev) {\r\n      console.log(ev)\r\n\r\n\r\n      // if (this.networkEvents.length > 500) this.networkEvents = \"\";\r\n      // this.networkEvents += `${eventName}, `;\r\n    },\r\n\r\n\r\n    graphsChanged(){\r\n      console.log(\"GRAPHS CHANGED\", this.graphs)\r\n    }\r\n  },\r\n  watch:{\r\n    graphs(){\r\n      console.log(this.graphs)\r\n      this.graphsChanged()\r\n      console.info(\"TEST WITH ONE GRAPH\")\r\n      this.network = this.graphs[0]\r\n    }\r\n  },\r\n  computed: {\r\n    graphs: {\r\n      get () { return this.$store.state.ipgs.graphs},\r\n      set (/*value*/) { /*this.updateTodo(value)*/ }\r\n    },\r\n  }\r\n}\r\n","<template>\r\n\r\n  <div class=\"wrapper\">\r\n\r\n    <network\r\n    id=\"network\"\r\n    class=\"network\"\r\n    ref=\"network\"\r\n    :nodes=\"network.nodes\"\r\n    :edges=\"network.edges\"\r\n    :options=\"network.options\"\r\n\r\n    @select-node=\"selectNodeEvent\"\r\n\r\n    @nodes-add=\"addNodeEvent\"\r\n\r\n\r\n\r\n    ></network>\r\n    <!--\r\n    @click=\"networkClickEvent\"\r\n    @select-edge=\"networkEvent\"\r\n    @nodes-remove=\"networkEvent\"\r\n    @edges-remove=\"networkEvent\"\r\n    @nodes-update=\"networkEvent\"\r\n    @edges-mounted=\"networkEvent\"\r\n    @edges-add=\"networkEvent\"\r\n    @edges-update=\"networkEvent\"\r\n    @edges-remove=\"networkEvent('edges-remove')\"\r\n    @nodes-remove=\"networkEvent('nodes-remove')\"\r\n\r\n\r\n\r\n    @before-drawing=\"drawBg\"\r\n    @double-click=\"networkEvent('doubleClick')\"\r\n    @oncontext=\"networkEvent('oncontext')\"\r\n    @hold=\"networkEvent('hold')\"\r\n    @release=\"networkEvent('release')\"\r\n    @select=\"networkEvent('select')\"\r\n    @select-node=\"networkEvent('selectNode')\"\r\n    @select-edge=\"networkEvent('selectEdge')\"\r\n    @deselect-node=\"networkEvent('deselectNode')\"\r\n    @deselect-edge=\"networkEvent('deselectEdge')\"\r\n    @drag-start=\"networkEvent('dragStart')\"\r\n    @dragging=\"networkEvent('dragging')\"\r\n    @drag-end=\"networkEvent('dragEnd')\"\r\n    @hover-node=\"networkEvent('hoverNode')\"\r\n    @blur-node=\"networkEvent('blurNode')\"\r\n    @hover-edge=\"networkEvent('hoverEdge')\"\r\n    @blur-edge=\"networkEvent('blurEdge')\"\r\n    @zoom=\"networkEvent('zoom')\"\r\n    @show-popup=\"networkEvent('showPopup')\"\r\n    @hide-popup=\"networkEvent('hidePopup')\"\r\n    @start-stabilizing=\"networkEvent('startStabilizing')\"\r\n    @stabilization-progress=\"networkEvent('stabilizationProgress')\"\r\n    @stabilization-iterations-done=\"networkEvent('stabilizationIterationsDone')\"\r\n    @stabilized=\"networkEvent('stabilized')\"\r\n    @resize=\"networkEvent('resize')\"\r\n    @init-redraw=\"networkEvent('initRedraw')\"\r\n\r\n    @after-drawing=\"networkEvent('afterDrawing')\"\r\n    @animation-finished=\"networkEvent('animationFinished')\"\r\n    @config-change=\"networkEvent('configChange')\"\r\n    @nodes-mounted=\"networkEvent('nodes-mounted')\"\r\n    @nodes-add=\"networkEvent('nodes-add')\"\r\n    @nodes-update=\"networkEvent('nodes-update')\"\r\n    @nodes-remove=\"networkEvent('nodes-remove')\"\r\n    @edges-mounted=\"networkEvent('edges-mounted')\"\r\n    @edges-add=\"networkEvent('edges-add')\"\r\n    @edges-update=\"networkEvent('edges-update')\"\r\n    @edges-remove=\"networkEvent('edges-remove')\"\r\n  -->\r\n  <!-- <img\r\n  id=\"scream\"\r\n  src=\"north_pole.png\"\r\n  style=\"display: none;\"\r\n  alt=\"Noth Pole\"\r\n  />\r\n\r\n  <button @click=\"addNode\">Add node</button>\r\n  <button @click=\"addEdge\">Add edge</button>\r\n  <button @click=\"resetNetwork\">Reset Network</button>\r\n  <button @click=\"removeNode\">Remove Node</button>\r\n  <button @click=\"removeEdge\">Remove Edge</button> -->\r\n  <!-- <div class=\"events\">\r\n  <p>\r\n  Network events:\r\n  <br />\r\n  {{networkEvents}}\r\n</p>\r\n</div> -->\r\n<NetworkPopups :network=\"network\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport \"vue-vis-network/node_modules/vis-network/dist/vis-network.css\";\r\n\r\nimport NetMixin from '@/mixins/NetMixin'\r\nimport NetworkEvent from '@/mixins/NetworkEventMixin'\r\n\r\nlet defNodes = [\r\n  { id: 'n1', label: \"Ipgs\", color: {background: 'red'}, shape: 'circle' },\r\n  { id: 'n2', label: \"WebApp\", color: {background: 'green'}, shape: 'star' },\r\n  { id: 'n3', label: \"InterPlanetary Graph System\" },\r\n  { id: 'n4', label: \"Mindmap App\" },\r\n  { id: 'n5', label: \"To know how to use Ipgs, type /h in the top input box and hit Enter\", shape: 'box'},\r\n  { id: 'n6', label: \"Pour savoir comment utiliser Ipgs, tapez /h dans le champ de saisie tout en haut\", shape: 'box' },\r\n  { id: \"https://spoggy-test9.solidcommunity.net/public/network/Semapps.jsonld\", label: \"Archipel Semapps\", shape: 'star', color: '#7FD1B9'},\r\n  { id: \"https://spoggy-test9.solidcommunity.net/public/\", label: \"Spoggy-test9 Public Folder\", shape: 'star', color: '#7FD1B9'},\r\n\r\n]\r\n\r\nlet defEdges = [\r\n  { id: 'e1', from: 'n1', to: 'n2', label: 'type' },\r\n  { id: 'e2', from: 'n1', to: 'n3', label: 'long name' },\r\n  { id: 'e3', from: 'n1', to: 'n4', label: 'category' },\r\n  { id: 'e4', from: 'n1', to: 'n5', label: 'help EN' },\r\n  { id: 'e5', from: 'n1', to: 'n6', label: 'help FR' },\r\n  { id: 'e6', from: 'n1', to: \"https://spoggy-test9.solidcommunity.net/public/network/Semapps.jsonld\", label: \"example\"},\r\n  { id: 'e7', from: 'n1', to: \"https://spoggy-test9.solidcommunity.net/public/\", label: \"example\"}\r\n]\r\n\r\n\r\nexport default {\r\n  name: \"NetworkVis\",\r\n  mixins: [NetworkEvent, NetMixin],\r\n  components: {\r\n    //  Network,\r\n    'NetworkPopups': () => import('@/components/network/NetworkPopups'),\r\n    // 'network': () => import('vue-vis-network')\r\n  },\r\n  data(){\r\n    return{\r\n      network: {\r\n        nodes: defNodes.slice(0),\r\n        edges: defEdges.slice(0),\r\n        options: {\r\n          nodes: {\r\n            shape: \"dot\",\r\n            scaling: {\r\n              min: 10,\r\n              max: 30,\r\n            },\r\n            font: {\r\n              size: 12,\r\n              face: \"Tahoma\",\r\n            },\r\n          },\r\n          edges: {\r\n            arrows: 'to',\r\n            width: 0.15,\r\n            color: { inherit: \"from\" },\r\n            smooth: {\r\n              type: \"continuous\",\r\n            },\r\n          },\r\n          physics: {\r\n            stabilization: false,\r\n            barnesHut: {\r\n              gravitationalConstant: -8000, //-8000\r\n              springConstant: 0.005, //0.001 //0.01\r\n              springLength: 100, //200\r\n            },\r\n          },\r\n          interaction: {\r\n            navigationButtons: true,\r\n            tooltipDelay: 200,\r\n            hideEdgesOnDrag: true,\r\n          },\r\n        },\r\n        options1: {\r\n          interaction: {\r\n            navigationButtons: true,\r\n          },\r\n          //  manipulation: true,\r\n          nodes: {\r\n            // shape: \"circle\",\r\n            // size:24,\r\n            // color: {\r\n            //   background: '#D2E5FF',\r\n            //   border: '#2B7CE9',\r\n            //   highlight: {\r\n            //     border: 'black',\r\n            //     background: 'white'\r\n            //   },\r\n            // hover: {\r\n            //   border: 'orange',\r\n            //   background: 'grey'\r\n            // }\r\n            //  },\r\n            font:{color:'black'},\r\n            // shapeProperties: {\r\n            //   useBorderWithImage:true\r\n            // }\r\n          },\r\n          edges: {\r\n            arrows: 'to',\r\n            //  color: 'lightgray'\r\n          },\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n/* * {\r\nfont-family: sans-serif;\r\n} */\r\n\r\n/* .wrapper {\r\npadding: 20px 50px;\r\ntext-align: center;\r\n} */\r\n/* .events {\r\ntext-align: left;\r\nheight: 70px;\r\n} */\r\n\r\n.network{\r\n  min-height: 95vh;\r\n  border: 1px solid black;\r\n  background: linear-gradient(to bottom, rgba(215, 215, 255), rgba(250, 250, 170));\r\n  padding: 10px;\r\n  height: 95vh;\r\n}\r\n.vis-label{\r\n  color: black;\r\n\r\n}\r\n\r\n/* @media only screen and (max-width: 600px) {\r\n.vis-label {\r\ndisplay: none;\r\n}\r\n.vis-button:after {\r\ncontent:\"°°\"\r\n}\r\n} */\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkVis.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkVis.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NetworkVis.vue?vue&type=template&id=617e578f&\"\nimport script from \"./NetworkVis.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkVis.vue?vue&type=script&lang=js&\"\nimport style0 from \"./NetworkVis.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}